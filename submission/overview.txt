What does the Amazon SLA mean you can expect from your app?
	Amazon's SLA means that we are guaranteed the uptime promised by Amazon (specified in their SLA) for our application. It also means that we should be wary of the bandwidth usage of our app if we want to stay within the free tier of usage.

How does or doesnâ€™t your ID generation algorithm prevent conflicts?
	Our application's ID generation algorithm prevents conflicts by appending a unique ID generated using UUIDv4. UUID is proven to be universally unique. "Generating 1 billion UUIDs every second for the next 100 years, the probability of creating just one duplicate would be about 50%" - Wikipedia

What platform-level, cluster-level, and application-level software is being used in your app?
	Platform-level: EC2 instances, S3 and SQS
	Cluster-level: server.py script and worker.py script
	Application-level: Webpage, command line upload, links to bucket where the user can see 

How does your app scale?
	Our application scales by closely watching its CPU utilization percentage. Once it reaches an upper threshold of 70%, it will launch additional instances to distribute the work load. If it finds that the CPU is steady at 40% for more than a minute, it will remove the excess computing power so we aren't over-provisioned.

How might it fail? (Hint: server.py)
	If server.py fails to start or fails for some unknown reason, the workers will continue to run but no new messages will be sent to the queue, thus idle computing power will be used. 

	~~I DONT KNOW JUST BS-ING~~
	

How could you change it to scale better?
	Add more instances - in this case we could also modify each worker so that they could communicate between each other and do one size instead of all 3 at once. This could allow for better scaling, especially if the user only needs a specific size; we could allow only the workers to do one size instead of wasting time doing all three.


What other existing apps might use a similar platform? Why? (Hint: Video.)
	Youtube might be using similar platforms. When a user submits a video, it can be of any size and format. Since YouTube offers the viewing of videos in different qualities, YouTube must compress each video submitted to lower qualities. For Example, a video submitted in 1080p must be resize to be 720p, 360, 240 ...

What metric did you chose for your AutoScaler/CloudWatch alarm? Why?
	We chose CPU as our metric. The reason for this was because we felt that it was a pretty good representation of the amount of work that was being loaded on each instance. Since we were given smaller micro-instances in the free tier, having more of them would be more beneficial then choosing another metric since their computing power is quite small.


If a worker fails while encoding an image, what happens? Can your system recover?
	If a worker fails while encoding an image our system cannot recover. The queue item will be deleted from SQS and the resize instructions from server.py would be forever lost in the void. To avoid this, we could implement a check and have the workers communicate with each other. If one fails a particular size reload, it sends a message through SQS for another order of that size for that image so another worker could pick it up.
